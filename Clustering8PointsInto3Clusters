# -*- coding: utf-8 -*-
"""Team project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1utTcVZ0D-h436EmgJPRuiev-pMAoil2G

# **Task 1**
"""

# import numpy as np
import matplotlib.pyplot as plt
import numpy as np

colors = ['red','blue','violet']

def k_means(data, k, initial_centroids, max_iterations=100):
    if len(initial_centroids) != k:
        raise ValueError("Number of initial centroids must be equal to k")

    #initialize centroids to initial_centroids values
    centroids = initial_centroids
    iteration_count = 0

    #iterate algorithm for max number of iterations unless it reaches stopping criteria
    for iteration in range(max_iterations):
        #calculate distances from each point to centroids and assign point to the closest centroid
        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)
        labels = np.argmin(distances, axis=1)

        #generate new centroids by taking a mean of all points in a cluster
        new_centroids = np.array([data[labels == i].mean(axis=0) for i in range(k)])

        #stoping the algorithm if newly generated centroids stayed the same 
        if np.all(centroids == new_centroids):
            break

        #increase count
        iteration_count = iteration + 1

        #graphing the clusters and initial centroids
        plt.figure(figsize=(6, 6))
        #plotting centroids of this iteration
        plt.scatter(centroids[:, 0], centroids[:, 1], marker='*', c='grey', s=200, label='Previous entroids')
        
        #reassigning new centroids
        centroids = new_centroids
        #plotting clusters
        for i in range(k):
            cluster_data = data[labels == i]
            plt.scatter(cluster_data[:, 0], cluster_data[:, 1], c=colors[i], label='Cluster {}'.format(i+1))
        #plotting newly generated centroids
        plt.scatter(centroids[:, 0], centroids[:, 1], marker='*', c='black', s=200, label='Centroids')
        plt.xlabel('X')
        plt.ylabel('Y')
        plt.title('K-Means Clustering')
        plt.legend()
        plt.show()

    return labels, centroids, iteration_count

# Initializing the data points, K parameter, and initail centroids
data = np.array([[2, 10], [2, 5], [8, 4], [5, 8], [7, 5], [6, 4], [1, 2], [4, 9]])
k = 3
initial_centroids = np.array([[2, 10], [5, 8], [1, 2]])

# plotting initial centroids and points unclustered
plt.scatter(initial_centroids[:, 0], initial_centroids[:, 1], marker='*', c='black', s=200, label='Centroids')
x = data[:, 0] 
y = data[:, 1] 
plt.scatter(x, y)
plt.xlabel('X')
plt.ylabel('Y')
plt.title('K-Means Clustering')
plt.legend()
plt.show()

#running the algorithm 
labels, centroids, iteration_count = k_means(data, k, initial_centroids)

#printing centroid points and number of iterations
print("Centroids:", centroids)
print("Number of iterations:", iteration_count)

# Plotting the clusters and centroids (final result)
colors = ['r', 'g', 'b']
plt.figure(figsize=(6, 6))
for i in range(k):
      cluster_data = data[labels == i]
      plt.scatter(cluster_data[:, 0], cluster_data[:, 1], c=colors[i], label='Cluster {}'.format(i+1))
plt.scatter(centroids[:, 0], centroids[:, 1], marker='*', c='black', s=200, label='Centroids')
plt.title('K-Means Clustering')
plt.legend()
plt.show()
